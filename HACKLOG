2023-06-26
    Initial commits were just to establish a logging system where we can
    have things broken out by category and consistent in formatting.  We've
    chosen to log to a single file by default, but you can pass in a filename
    to startFileoutput() to override that.

    I also made the choice of using UTC for all logging output.  This is to
    simplify adding logging to a database later, if that's desireable.  Postgres
    has very strange timezone support, and because of the existance of both
    time zone aware and "flat" timestamp types, it gets very confusing to
    mix them.

2023-06-30
    The next commit was to add database support, which will be managed
    by SQLAlchemy as an ORM and Alembic as a migration tool.  The alembic
    portions are commented out, as I want to establish the changes needed
    from the default setup.

    Magic line:  SQLEngine = create_engine('postgresql://@:5432/' + DB_NAME)

    This uses the unix socket to connect to postgres, rather than tcp/ip, and
    also uses the current user.  If you want to use tcp/ip, add localhost
    in front of the required :port-number, and if you want a different user
    tack that before the @ sign.

    The actual syntax is:  driver://user:pass@localhost:port/dbname

    Where you have to have SOMETHING for the host:port section, so to use
    the unix socket, you omit the hostname, but add the unused :port part
    so it's not an error.

2023-07-01
    alembic init alembic

    This creates the initial boilerplate files, which have to be modified, so
    I will do a git commit at this point so it's easier to see what gets
    changed.

    I added a quick hack to read in the VERSION file, so we have a
    "code version" to use.  In theory, alembic is already supposed to handle
    version migrations, but since I'm tracking simple version numbers for
    git tagging purposes anyways, being able to fetch it is handy.

    In my C code, I would auto-increment the version whenever I did a "make",
    but that process doesn't exist here.  I'm not sure it's really worth the
    effort to cobble up a git "hook" to run that auto-update as a pre-commit
    action...

2023-07-09
    I managed to get SQL logging to work through SQLAlchemy, which is nice.
    Obviously this can't log SQL-related errors, so it's best to use it for
    game-related things that we'll want to do analysis on, not general
    errors that should still go to plain old files or stderr.

2023-07-10
    Alembic is a PITA about getting the order of things "just right", but the
    current state seems to have settled.  We have the database and code in
    agreement, and the version script has upgrade() and downgrade() methods
    that appear to be correct.

    The db_system's init_db() method will auto-upgrade the database to match
    alembic's view of what it should be if the head is not current.

    alembic revision --autogenerate -m 'option and log_entry'

    Updated option table to change version to db_version, and add a column
    for code_version, so the database not only has the alembic migration it
    was last using, but also the last version of the codebase.

    At present, this auto-updates without any user input, just a log message
    saying it did it.  In future, we could add a failure condition to force
    the user to decide if they are OK with it being updated, or if they want
    to backup/verify things first.

    Tweaked .gitignore to specifically add a comment at the bottom for
    hand-added entries, and added *.log.  This was already there from Django
    rules, but I wanted it explicit in case we ever regenerate this and
    some future new default file doesn't include it.

    Changed log_system to use native timezone info, and in simplifying the
    code to trust strftime(), expanded the microseconds places from 3 to 6.
    This change makes it easier to work with dates in PostgreSQL, since the
    client there will auto-convert to local timezone info as well.
